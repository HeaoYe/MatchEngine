#version 450

#extension GL_GOOGLE_include_directive : require

#include "types.glsl"
#include "../utils.glsl"

layout (std430, binding = 0) writeonly buffer CountsBuffer {
    uint visible_mesh_instance_count_div_256;
    uint y;
    uint z;
    uint visible_mesh_instance_count;
    uint available_indirect_command_count;
};

layout (std430, binding = 1) writeonly buffer VisibleMeshInstanceIndices {
    uvec2 visible_mesh_instance_indices[];
};

layout (std430, binding = 2) writeonly buffer PrimitiveCountsBuffer {
    uint primitive_counts[];
};

layout (binding = 6) uniform sampler2D depth_texture;

uint cull_near_far(float view_z) {
    return uint(step(view_z, -camera.near) * step(-view_z, camera.far));
}

const vec3 plane_a[4] = {
    vec3( 1, 0, 0),
    vec3( -1, 0, 0),
    vec3( 0, -1, 0),
    vec3( 0, 1, 0)
};

const vec3 plane_normal[4] = {
    vec3(-1, 0, 0),
    vec3(1, 0, 0),
    vec3(0, 1, 0),
    vec3(0, -1, 0)
};

uint cull_lrtb(vec3 ndc) {
    uint res = 1;
    for (int i = 0; i < 6; i ++) {
        float b = -dot(ndc - plane_a[i], plane_normal[i]);
        res &= uint(step(b, 0));
    }
    return res;
}

// 3.遍历所有MeshInstance, 将所有不被剔除的实例收集起来
layout (local_size_x = 256, local_size_y = 1, local_size_z = 1) in;
void main() {
    uint mesh_instance_index = gl_GlobalInvocationID.x;
    if (mesh_instance_index >= mesh_instance_count) {
        return;
    }

    MeshInstance mesh_instance = mesh_instances[mesh_instance_index];
    uint mesh_id = mesh_instance.mesh_id;
    MeshDescriptor descriptor = mesh_descriptors[mesh_id];

    // 视锥剔除
    vec3 corners[8] = vec3[](
        vec3(descriptor.aabb_min__radius.x, descriptor.aabb_min__radius.y, descriptor.aabb_min__radius.z),
        vec3(descriptor.aabb_max__pad.x, descriptor.aabb_min__radius.y, descriptor.aabb_min__radius.z),
        vec3(descriptor.aabb_min__radius.x, descriptor.aabb_max__pad.y, descriptor.aabb_min__radius.z),
        vec3(descriptor.aabb_min__radius.x, descriptor.aabb_min__radius.y, descriptor.aabb_max__pad.z),
        vec3(descriptor.aabb_max__pad.x, descriptor.aabb_max__pad.y, descriptor.aabb_min__radius.z),
        vec3(descriptor.aabb_min__radius.x, descriptor.aabb_max__pad.y, descriptor.aabb_max__pad.z),
        vec3(descriptor.aabb_max__pad.x, descriptor.aabb_min__radius.y, descriptor.aabb_max__pad.z),
        vec3(descriptor.aabb_max__pad.x, descriptor.aabb_max__pad.y, descriptor.aabb_max__pad.z)
    );

    vec2 ndc_min = vec2(1);
    vec2 ndc_max = vec2(-1);
    float z_min = 1;
    mat3 model = compute_model(mesh_instance.scale, mesh_instance.rotation);

    uint res = 0;
    for (int i = 0; i < 8; i ++) {
        vec4 view_pos = camera.view * vec4(mesh_instance.location + model * corners[i], 1);
        uint nf_res = cull_near_far(view_pos.z);

        vec4 clip_pos = camera.project * view_pos;
        vec3 ndc_pos = clip_pos.xyz / clip_pos.w;
    
    	ndc_pos.z *= step(view_pos.z, -camera.near);

    	uint lrtb_res = cull_lrtb(ndc_pos);

        ndc_pos.xy = clamp(ndc_pos.xy, -1, 1);
        ndc_pos.z = clamp(ndc_pos.z, 0, 1);

        ndc_min = min(ndc_min, ndc_pos.xy);
        ndc_max = max(ndc_max, ndc_pos.xy);
        z_min = min(z_min, ndc_pos.z);

        res = max(res, nf_res * lrtb_res);
    }

    // 遮挡剔除
    vec2 viewport = vec2(depth_texture_size);
    vec2 scr_pos_min = (ndc_min * 0.5 + 0.5) * viewport;
    vec2 scr_pos_max = (ndc_max * 0.5 + 0.5) * viewport;
    vec2 scr_rect = (ndc_max - ndc_min) * 0.5 * viewport;
    float scr_size = max(scr_rect.x, scr_rect.y);

    int mip = int(ceil(log2(scr_size)));
    uvec2 dim = (uvec2(scr_pos_max) >> mip) - (uvec2(scr_pos_min) >> mip);
    int use_lower = int(step(2, dim.x) * step(2, dim.y));
    mip = use_lower * max(0, mip - 1) + (1 - use_lower) * mip;

    vec2 uv_scale = 1 / viewport;
    vec2 uv_min = scr_pos_min * uv_scale;
    vec2 uv_max = scr_pos_max * uv_scale;
    vec2 coords[4] = {
        uv_min,
        vec2(uv_min.x, uv_max.y),
        vec2(uv_max.x, uv_min.y),
        uv_max
    };

    float scene_z = 0;
    for (int i = 0; i < 4; i ++) {
	    scene_z = max(scene_z, textureLod(depth_texture, vec2(coords[i].x, 1 - coords[i].y), mip).r);
    }
    res *= 1 - uint(step(scene_z, z_min));
    
    if (res == 0) {
        // 被剔除直接返回
        return;
    }

    // 根据球包围体的投影面积选择Lod
    vec4 center = camera.view * vec4(mesh_instance.location, 1);
    float radius = descriptor.aabb_min__radius.w * max(max(mesh_instance.scale.x, mesh_instance.scale.y), mesh_instance.scale.z);
    float k = radius / length(center);
    uint lod_index;
    if (k > 0.1) {
        lod_index = 0;
    } else if (k > 0.1) {
        lod_index = 1;
    } else if (k > 0.055) {
        lod_index = 2;
    } else if (k > 0.035) {
        lod_index = 3;
    } else if (k > 0.02) {
        lod_index = 4;
    } else if (k > 0.01) {
        lod_index = 5;
    } else {
        lod_index = 6;
    }
    lod_index = min(lod_index, descriptor.lod_count - 1);

    // 写入缓存
    uint new_mesh_instance_index = atomicAdd(visible_mesh_instance_count, 1);
    if (new_mesh_instance_index % 256 == 0) {
        atomicAdd(visible_mesh_instance_count_div_256, 1);
    }
    visible_mesh_instance_indices[new_mesh_instance_index] = uvec2(mesh_instance_index, lod_index);
    atomicAdd(primitive_counts[descriptor.lods[lod_index]], 1);
}
